@startuml Avatar

interface BDDTrait{
	chercherAdresse(str:String): String
	recupLieux(file:BufferedSource):List[String]
	chercherLieu(mot: String): String
	getDicoExpr(): Array[Array[String]]
	getDicoPRN(): Array[Array[String]]
}

interface MachineDialogue {
	ask(s: String): List[String]
	reinit(): Unit
	getLangueActuelle (): Int 
}

interface ConstructionTrait{
	construireLangue(requete: String): List[String]
	construireConfirmation(requete: String, langueActuelle: Int): String
}

interface FautesTrait{
	correction(mots: List[String], modeles: List[String]): List[String]
}

interface VoiceTrait{
	ajouteMessage(message: String, langue: Int): Unit
}

interface AnalyseTrait{
	analyser(phrase: String): List[(String,String)]
	politeTest_Bonjour(phrase: String): Boolean
	politeTest_OnlyBonjour(phrase: String): Boolean
	getDicoLangue(): List[String]
}

interface LangueTrait{
	langueSuivante(): Unit
	reinitLangue():Unit
 	getLangueActuelle(): Int
  	setLangueActuelle(langue: String): Unit
  	getLangueQuestion(): String
  	langueStringToInt(langue: String): Int
	langueIntToString(langue: Int): String
}


class MachineImpl <<(O,Orange)>>
class InterfaceGraphique <<(O,Orange)>>
class ConstructionImpl <<(O,Orange)>>
class AnalyseImpl <<(O,Orange)>>
class BDDImpl <<(O,Orange)>>
class FautesImpl <<(O,Orange)>>
class LangueImpl <<(O,Orange)>>

MachineImpl -|> MachineDialogue
BDDTrait <|-  BDDImpl
ConstructionImpl -|>  ConstructionTrait
AnalyseImpl -|>  AnalyseTrait
FautesImpl -|> FautesTrait
LangueTrait <|-  LangueImpl

MachineDialogue --> ConstructionTrait
InterfaceGraphique --> MachineDialogue 
InterfaceGraphique -> VoiceTrait 
ConstructionTrait --> AnalyseTrait

AnalyseTrait -> LangueTrait
AnalyseTrait --> FautesTrait
AnalyseTrait --> BDDTrait
MachineDialogue --> LangueTrait

@enduml