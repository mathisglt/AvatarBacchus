@startuml Avatar

interface BDDTrait{
	var dictionnaireExpressionsInternationale : Array[Array[String]]
 	var dictionnairePRNInternationale : Array[Array[String]]
  	val lignesBDD: Array[String]
	chercherAdresse(str:String): String
	recupLieux(file:BufferedSource):List[String]
	chercherLieu(mot: String): String
	createDicoExpr(): Unit
	createDicoPRN(): Unit
	getDicoExpr(): Array[Array[String]]
	etDicoPRN(): Array[Array[String]]
}

interface MachineDialogue {
	ask(s: String): List[String]
	reinit(): Unit
	test(l: List[String]): List[String]
}

interface ConstructionTrait{
	construire(phrase: String): List[String]
}

interface InterfaceGraphique{

}

interface FautesTrait{
	correction(mots :List[String]): List[String]
}

interface AnalyseTrait{
	analyser(phrase: String): List[(String,String)]
	politeTest_Bonjour(phrase: String): Boolean
	politeTest_OnlyBonjour(phrase: String): Boolean
	getDicoLangue(): List[String]
}

interface LangueTrait{
	def langueSuivante(): Unit
  	def getLangueActuelle(): Int
  	def setLangueActuelle(langue: String): Unit
}


class MachineImpl <<(O,Orange)>>
class InterfaceGraphique <<(O,Orange)>>
class ConstructionImpl <<(O,Orange)>>
class AnalyseImpl <<(O,Orange)>>
class BDDImpl <<(O,Orange)>>
class FautesImpl <<(O,Orange)>>
class LangueImpl <<(O,Orange)>>

MachineImpl -|> MachineDialogue
BDDTrait <|-  BDDImpl
ConstructionImpl -|>  ConstructionTrait
AnalyseImpl -|>  AnalyseTrait
FautesImpl -|> FautesTrait
LangueTrait <|-  LangueImpl

MachineDialogue --> ConstructionTrait
MachineDialogue <- InterfaceGraphique
ConstructionTrait --> AnalyseTrait

AnalyseTrait -> LangueTrait
AnalyseTrait --> FautesTrait
AnalyseTrait --> BDDTrait
MachineDialogue --> LangueTrait

@enduml