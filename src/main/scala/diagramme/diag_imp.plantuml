@startuml Avatar

interface BDDTrait{
	val lignesBDD: Array[String]
	chercherAdresse(str:String): String
}

interface MachineDialogue {
	ask(s: String): List[String]
	reinit(): Unit
	test(l: List[String]): List[String]
}

interface ConstructionTrait{
	construire(phrase: String): List[String]
}

interface InterfaceGraphique{

}

interface FautesTrait{
	correction(mots :List[String]): List[String]
}

interface AnalyseTrait{
	analyser(phrase: String): List[(String,String)]
}

interface LangueTrait{
	def changementLangue(langue : String) : Unit
	def getLangueActuelle() : Int
}


class MachineImpl <<(O,Orange)>>
class InterfaceGraphique <<(O,Orange)>>
class ConstructionImpl <<(O,Orange)>>
class AnalyseImpl <<(O,Orange)>>
class BDDImpl <<(O,Orange)>>
class FautesImpl <<(O,Orange)>>
class LangueImpl <<(O,Orange)>>

MachineImpl -|> MachineDialogue
BDDTrait <|-  BDDImpl
ConstructionImpl -|>  ConstructionTrait
AnalyseImpl -|>  AnalyseTrait
FautesImpl -|> FautesTrait
LangueImpl -|> LangueTrait

MachineDialogue --> ConstructionTrait
MachineDialogue <- InterfaceGraphique
ConstructionTrait --> AnalyseTrait
AnalyseTrait -> BDDTrait
AnalyseTrait --> LangueTrait
AnalyseTrait --> FautesTrait

@enduml